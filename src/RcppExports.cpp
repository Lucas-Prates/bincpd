// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_cvdynseg_cpp
List compute_cvdynseg_cpp(const NumericMatrix& data_mat, int segthr, const NumericVector& lambda_set, const int& n_folds, const int& ncol, const int& nrow, const Function& create_pen_func);
RcppExport SEXP _bincpd_compute_cvdynseg_cpp(SEXP data_matSEXP, SEXP segthrSEXP, SEXP lambda_setSEXP, SEXP n_foldsSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP create_pen_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_mat(data_matSEXP);
    Rcpp::traits::input_parameter< int >::type segthr(segthrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda_set(lambda_setSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_folds(n_foldsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const Function& >::type create_pen_func(create_pen_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cvdynseg_cpp(data_mat, segthr, lambda_set, n_folds, ncol, nrow, create_pen_func));
    return rcpp_result_gen;
END_RCPP
}
// compute_cvseg_cpp
List compute_cvseg_cpp(const NumericMatrix& data_mat, int segthr, const int& n_folds, const int& ncol, const int& nrow);
RcppExport SEXP _bincpd_compute_cvseg_cpp(SEXP data_matSEXP, SEXP segthrSEXP, SEXP n_foldsSEXP, SEXP ncolSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_mat(data_matSEXP);
    Rcpp::traits::input_parameter< int >::type segthr(segthrSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_folds(n_foldsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrow(nrowSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cvseg_cpp(data_mat, segthr, n_folds, ncol, nrow));
    return rcpp_result_gen;
END_RCPP
}
// compute_dynseg_cpp
List compute_dynseg_cpp(const NumericMatrix& data_mat, const int& ncol, int segthr, const Function& pen_func);
RcppExport SEXP _bincpd_compute_dynseg_cpp(SEXP data_matSEXP, SEXP ncolSEXP, SEXP segthrSEXP, SEXP pen_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_mat(data_matSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type segthr(segthrSEXP);
    Rcpp::traits::input_parameter< const Function& >::type pen_func(pen_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dynseg_cpp(data_mat, ncol, segthr, pen_func));
    return rcpp_result_gen;
END_RCPP
}
// compute_hierseg_cpp
List compute_hierseg_cpp(const NumericMatrix& data_matrix, const int& n, const int& m, const Function& pen_func);
RcppExport SEXP _bincpd_compute_hierseg_cpp(SEXP data_matrixSEXP, SEXP nSEXP, SEXP mSEXP, SEXP pen_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Function& >::type pen_func(pen_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hierseg_cpp(data_matrix, n, m, pen_func));
    return rcpp_result_gen;
END_RCPP
}
// compute_rand
float compute_rand(IntegerVector cp1, IntegerVector cp2, int const& m);
RcppExport SEXP _bincpd_compute_rand(SEXP cp1SEXP, SEXP cp2SEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rand(cp1, cp2, m));
    return rcpp_result_gen;
END_RCPP
}
// compute_hausdorff
int compute_hausdorff(IntegerVector cp1, IntegerVector cp2);
RcppExport SEXP _bincpd_compute_hausdorff(SEXP cp1SEXP, SEXP cp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hausdorff(cp1, cp2));
    return rcpp_result_gen;
END_RCPP
}
// compute_symdiff
int compute_symdiff(IntegerVector cp1, IntegerVector cp2);
RcppExport SEXP _bincpd_compute_symdiff(SEXP cp1SEXP, SEXP cp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_symdiff(cp1, cp2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bincpd_compute_cvdynseg_cpp", (DL_FUNC) &_bincpd_compute_cvdynseg_cpp, 7},
    {"_bincpd_compute_cvseg_cpp", (DL_FUNC) &_bincpd_compute_cvseg_cpp, 5},
    {"_bincpd_compute_dynseg_cpp", (DL_FUNC) &_bincpd_compute_dynseg_cpp, 4},
    {"_bincpd_compute_hierseg_cpp", (DL_FUNC) &_bincpd_compute_hierseg_cpp, 4},
    {"_bincpd_compute_rand", (DL_FUNC) &_bincpd_compute_rand, 3},
    {"_bincpd_compute_hausdorff", (DL_FUNC) &_bincpd_compute_hausdorff, 2},
    {"_bincpd_compute_symdiff", (DL_FUNC) &_bincpd_compute_symdiff, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bincpd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
