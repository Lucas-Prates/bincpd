// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// build_matrices_cpp__
List build_matrices_cpp__(NumericMatrix data_mat);
RcppExport SEXP _bincpd_build_matrices_cpp__(SEXP data_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data_mat(data_matSEXP);
    rcpp_result_gen = Rcpp::wrap(build_matrices_cpp__(data_mat));
    return rcpp_result_gen;
END_RCPP
}
// comp_dynseg_cpp__
List comp_dynseg_cpp__(NumericMatrix loglike_mat, NumericMatrix p_mat, int segthr);
RcppExport SEXP _bincpd_comp_dynseg_cpp__(SEXP loglike_matSEXP, SEXP p_matSEXP, SEXP segthrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type loglike_mat(loglike_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p_mat(p_matSEXP);
    Rcpp::traits::input_parameter< int >::type segthr(segthrSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_dynseg_cpp__(loglike_mat, p_mat, segthr));
    return rcpp_result_gen;
END_RCPP
}
// comp_dynseg_cpp_fast__
List comp_dynseg_cpp_fast__(NumericVector loglike_mat, NumericVector p_mat, int ncol, int segthr);
RcppExport SEXP _bincpd_comp_dynseg_cpp_fast__(SEXP loglike_matSEXP, SEXP p_matSEXP, SEXP ncolSEXP, SEXP segthrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type loglike_mat(loglike_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_mat(p_matSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type segthr(segthrSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_dynseg_cpp_fast__(loglike_mat, p_mat, ncol, segthr));
    return rcpp_result_gen;
END_RCPP
}
// hierarchical_algorithm_cpp
List hierarchical_algorithm_cpp(const NumericMatrix& data_matrix, const int& n, const int& m, const Function& pen_func);
RcppExport SEXP _bincpd_hierarchical_algorithm_cpp(SEXP data_matrixSEXP, SEXP nSEXP, SEXP mSEXP, SEXP pen_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Function& >::type pen_func(pen_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(hierarchical_algorithm_cpp(data_matrix, n, m, pen_func));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bincpd_build_matrices_cpp__", (DL_FUNC) &_bincpd_build_matrices_cpp__, 1},
    {"_bincpd_comp_dynseg_cpp__", (DL_FUNC) &_bincpd_comp_dynseg_cpp__, 3},
    {"_bincpd_comp_dynseg_cpp_fast__", (DL_FUNC) &_bincpd_comp_dynseg_cpp_fast__, 4},
    {"_bincpd_hierarchical_algorithm_cpp", (DL_FUNC) &_bincpd_hierarchical_algorithm_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_bincpd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
