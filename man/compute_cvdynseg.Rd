% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_cvdynseg.R
\name{compute_cvdynseg}
\alias{compute_cvdynseg}
\title{Segments the data using dynamical programming with cross validation on the
regularization constant \eqn{\lambda}}
\usage{
compute_cvdynseg(
  data_matrix,
  segthr = NULL,
  lambda_set = c(0.1, 1, 10),
  n_folds = 5,
  pen_func = bic_loss_hs
)
}
\arguments{
\item{data_matrix}{Data matrix to perform change point analysis}

\item{segthr}{Threshold on the number of block segments to fit the model.
This is highly recommend for performance issues on large data sets}

\item{lambda_set}{The set of penalization constants that will be used in the
k-fold CV.}

\item{n_folds}{Number of folds used in the k-fold CV}

\item{pen_func}{A penalization function defined i integer intervals
The function signature should be pen(left_index, right_index, n, m),
where the left_index:right_index is the integer interval, n the sample
size and m the number of variables/columns.}
}
\description{
Minimizes the k-fold CV mean negative regularized loss.
For each fold, the dynseg algorithm is run and we compute the best estimator
best estimator for each penalization constant and their respective log
likelihoods. In the end, the algorithm is rerun in the whole data set using
and select the best estimator from the best number of change points.
}
